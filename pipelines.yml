stages:
    - build
    - deploy

build_backend:
    stage: build
    image: node:latest    
    script:
        - cd BackCatalogo
        - ls
        - npm run devStart
        - echo "Building back-end..."
        - echo "Finished building the app."
    artifacts:
        expire_in: 1 week
        paths:
            - BackCatalogo

      
    
    
    

build_frontend:
  stage: build
  image: node:latest
  script:
    - echo "Building the app"
    - cd FrontCatalogo
    - ls
    - npm --force install
    - CI=false npm run build
    - echo "Finished building the app."
    - cd dist
    - ls
    - cd ..
    - pwd
  artifacts:
    name: react_build
    paths:
      - ./FrontCatalogo/dist/

  
  



    
# deploy_Backend:



#     stage: deploy
#     needs: [build_backend]
#     image: alpine:3.11
#     before_script:
#         - apk update && apk add openssh-client bash
#         - mkdir -p ~/.ssh
#         - chmod 700 ~/.ssh
#         - eval $(ssh-agent -s)
#         - echo "$SSH_ACCESS_KEY" | tr -d '\r' | ssh-add - 
#         - touch ~/.ssh/config
#         - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#         - ssh-keyscan -H "$DEPLOY_SERVER_IP" >> ~/.ssh/known_hosts
#         - chmod 644 ~/.ssh/known_hosts
#     script:
#         - echo "Deploy started..."
#         - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl stop myapp.service"
#         - scp Backend_v2/digitalbooking/target/digitalbooking-0.0.1-SNAPSHOT.jar ubuntu@$DEPLOY_SERVER_IP:~/proyecto/
#         - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl start myapp.service"
#         - echo "Finished deploying the app."

#     rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#       when: always
    
    

# deploy_Frontend:
#    stage: deploy
#    needs: [build_frontend]
#    image: python:latest 
#    script:
#       - ls
#       - pwd   
#       - cd FrontEnd/dist
#       - ls
#       - pip install awscli   
#       - aws configure set aws_access_key_id $AWS_ACCESS_KEY
#       - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
#       - aws configure list
#       - aws s3 sync /builds/ctd/hispanos/proyecto-integrador-1/proyecto-integrador-0223/0621pt-c7/grupo-05/FrontEnd/dist s3://c7g5-bucket2
#    rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#       when: always         
  


publish:
  image: node:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_NAME =~ /^v\d+\.\d+\.\d+.*$/
      changes:
        - package.json
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc

    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi
